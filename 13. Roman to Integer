/**
* @param {string} s
* @return {number}
*/
let romanToInt = function(s) {
    let romanToInt = {
        I: 1,
        V: 5,
        X: 10,
        L: 50,
        C: 100,
        D: 500, 
        M: 1000
    }

    let total = 0;

    for (let i = 0; i < s.length; i++) {
        let currentInt = romanToInt[s.charAt(i)];
        let nextInt = romanToInt[s.charAt(i + 1)];

        if (nextInt) {
            if (currentInt >= nextInt) {
                total += currentInt;
            } else {
                total += (nextInt - currentInt);
                i++;
            }
        } else {
            total += currentInt;
        }
    }

    return total;
};



////////////////////////////////////////////////////////////////////// Leetcode Notes ////////////////////////////////////////////////////////////////////////////////////

In a lot of countries, Roman Numberals are taught in elementary school-level math. This has made them a somewhat popular "easy" interview question. Unfortunately though, 
this ignores the fact that not everybody learned them in school, and therefore a big advantage has been given to those who did. I suspect it's also difficult for a lot of 
us who have learned them previously to fully appreciate how much easier prior experience makes this question. While this is very unfair, and possibly very frustrating,
keep in mind that the best thing you can do is work through this question and the related question Integer to Roman so that you don't get caught out by it in a real interview.

Can we assume the input is valid?

Yes. Here on Leetcode, you can make that assumption because you haven't been told what to do if it isn't.

In a real interview, this is a quation you should ask the interviewer. Don't ever assume without asking in a real interview that the input has to be valid.

Is there only on valid representation for each number?

This is more relevant to the other question, Integer to Roman, however we'll still briefly look at it noew.

Given that the representation for 3 is III, it could seem natural that the representation for 15 is vvv, because that would be 5 + 5 + 5. However, it's actually XV, which
is 10 + 5. How are you even supposed to know which is correct?

The trick is to use the "biggest" symbols you can. Because x is bigger than v, we should use an x firth and then make up the remainder with a single v, giving xv. 

We'll talk more about this in the Integer to Roman article. This question is a lot simpler because there's only one logical way of converting from a Roman Numeral to an
Integer. This is also why this question is labelled as "easy", whereas the other is labelled as "medium".


A few more examples

If you're not very familiar with Roman Numerals, work through these examples and then have another go at writing your own algorithm before reading the rest of this solution
article.

What is CXVII as an interger?

Recall that C = 100, X = 10, V = 5, and I = 1. Because the symbols are ordered from most significant to least. we can simply add the symbols, i.e. 
C + X + V + I + I = 100 + 10 + 5 + 1 + 1 = 117 .

What is DXCI as an integer?

Recall that D = 500.

Now, notice that this time the symbols are not ordered from most significant to leat - the X and C are out of numeric order. Because of this, we subtract the value of x (10)
from the value of C (100) to get 90.

So, going from left to right, we have D + (C - X) + I = 500 + 90 + 1 = 591.

What is CMXCIV as an integer?

Recall that M = 1000. 

The symbols barely look sorted at all here - from left-to-right we have 100, 1000, 10, 100, 1, 5. Do not panic though, we just need to look for each occurence of a smaller
symbols preceding a bigger symbol. The first, third, and fifth symbols are all smaller than their next symbol. Therefore they are all going to be subtracted from their next.


> The first symbols are CM. This is M - C = 1000 - 100 = 900

> The second two symbols are XC. This is C - X = 100 - 10 = 90

> The final two symbols are IV. This V - I = 5 - 1 = 4

Like we did above, we add these together. (M - C) + (C - X) + (V - I) = 900 + 90 + 4 = 994



``````````````````````````````````````````````````````````Approach 1: Left-to-Right Pass`````````````````````````````````````````````````````````````````````````````````

Let's hard-code a mapping with the value of each symbol so that we can easily look them up.

M -> 1000

D -> 500

C -> 100

L -> 50

X -> 10

V -> 5

I -> 1



Now, recall that each symbol adds its own value, except for when a smaller valued is before a larger valued symbol. In those cases, instead of adding both symbols to the total
, we need to subtract the large from the small, adding that instead.

Therefore, the sumplest algorithm is to use a pointer to scan through the string, at eah step deciding whether to add the current symbol and go forward 1 place, or add the 
difference of the next 2 symbols and go forward 2 places. Here is this algorithm in pseudocode.


Complexity Analysis:

let n be the length of the input string (the total number of symbols in it).

> Time complexity: 0(1).

  As there is a finite set of roman numberals, the maximum number possible can be 3999, which in roman numberals MMMCMXCIX. As such the time complexity is 0(1).

  If roman numerals had an arbitrary number of symbols, then the time complexity would be proportional to the length of input, i.e 0(n).

> Space complexity: 0(1).

  Because only a contrant number of single-value variables are used, the space complexity is 0(1).

Approach 2: Left-to-Right Pass Improved`````````````````````````````````````````````````````````````````````````````

Intuition:

Instead of viewing a Roman Numeral as having 7 unique symbols, we could instead view it as having 13 unique symbols-some of length-1 and some of length-2.

               |------>
               | M -> 1000
               |        CM -> 900
               | D -> 500  
               |        CD -> 400
               | C -> 100 
               |        XC -> 90
               | L -> 50
               |        XL -> 40
               | X -> 10
               |        IX -> 9
               | V -> 5
               |        IV -> 4
               | I -> 1
               |------>

For example, here is the Roman Numeral MMCMLXXXIX broken into its symbols using this definition:

    MMCMLXXXIX ---> M M CM L X X X IX

After making a Map of String -> Integer with the 13 "symbols", we need to work our way down the string in the same way as before (we'll do left-to-right, will work okay too),
firstly checking if we're at a length-2 symbols, and if not, then creating it as a length-1 symbol.



``````````````````````````````````````````````````````````````````Approach 3: Right-to-Left Pass```````````````````````````````````````````````````````````````````````
Intuition: 

This approach is a more elegant variant of Approach 1. Just to be clear though, Approach 1 and Approach 2 are probably sufficient for an interview. This approach is still well 
worth understanding though.

In the "subtraction" cases, such as XC, we've been updating our running sum as follows: 

sum += value(c) - value(x)

However, notie that this is mathematically equivalent to the following:

   sum += value(c)
   sum -= value(x)

Utilizing this means that we can process one symbol each time we go around the main loop. We still need to determing whether or not out current symbol should be added or 
subtracted by lookng at the neighbour though. 

In Approach 1, we had to be careful when inspecting the next symbol to not go over the end of the string. THis check wasn't difficult to do, but it increased the code complexity a bit, 
and it turns out we can avoid it with this approach!

Observe the following`````````````````````````````````````````````````````
